#
# Azure DevOps pipeline
#
# Description     : DevInfra Auto remove POC
# Created by      : Muhammed Iqbal
#
#

trigger: none

#trigger:
#  batch: true
#  branches:
#    include:
#      - master
#      - development
#  paths:
#    exclude:
#      - README.md
#      - LICENSE
#      - .gitignore

# Don't run against PRs
pr: none

parameters:
- name: resource_ttl
  displayName: Resources Expiry Time
  type: string
  default: 1Hour
  values:
  - 5Minutes
  - 1Hour
  - 4Hours
  - 8Hours
  - 1Day
  - 2Days
  - 7Days


variables:
- group: go-app-TFVARS

- name: vmImageName
  value: 'ubuntu-latest'

- name: armConnectionName
  value: mysubscription

- name: terraformVarFile
  value: auth.tfvars

stages:
- stage: Validation
  displayName: Terraform config validation

  jobs:  
  - job: Validation
    displayName: Terraform config validate
    pool:
      vmImage: $(vmImageName)
    
    steps:
      - task: TerraformInstaller@0
        displayName: Install
        inputs:
          terraformVersion: 'latest'
      
      - task: TerraformCLI@0
        displayName: Init
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/go-app/terraform'
          commandOptions: '-backend=false'
          allowTelemetryCollection: false    
      
      - task: TerraformCLI@0
        displayName: Validate
        inputs:
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/go-app/terraform'
          allowTelemetryCollection: true

      
- stage: Provision
  displayName: Provision Infrastructure
  dependsOn: Validation
  condition: and(succeeded(), ne(variables['action'], 'destroy'))

  jobs:  
  - job: Provision
    displayName: Provision Infrastructure
    pool:
      vmImage: $(vmImageName)

    steps:
      - task: Bash@3
        displayName: Set TTL Variable
        inputs:
          targetType: 'inline'
          script: |
            ttl=${{ parameters.resource_ttl }}
            expiry_date=`TZ='Asia/Dubai' date '+%d/%m/%Y %H:%M:%S' --date=$ttl` 
            #echo "print expiry_date: $expiry_date"
            echo "##vso[task.setvariable variable=expiry_date]$expiry_date"

      - script: |
            echo "expiry date variable"
            echo $(expiry_date)

      - task: TerraformInstaller@0
        displayName: Install 
        inputs:
          terraformVersion: 'latest'
      
      - task: TerraformCLI@0
        displayName: Init
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/go-app/terraform'
          backendType: 'azurerm'
          backendServiceArm: '$(armConnectionName)'
          backendAzureRmResourceGroupName: '$(backend-sa-rg-name)'
          backendAzureRmStorageAccountName: '$(backend-sa-name)'
          backendAzureRmContainerName: '$(backend-sa-container-name)'
          backendAzureRmKey: '$(tf-state-file-name)'
          allowTelemetryCollection: false
      
     
      - task: TerraformCLI@0
        displayName: Plan
        inputs:
          command: 'plan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/go-app/terraform'
          environmentServiceName: '$(armConnectionName)'
          commandOptions: '-var "expiry_date=$(expiry_date)" -var "pipeline_id=$(pipeline_id)" -var "resource_group_name=$(resource_group_name)" -var "app_name=$(app_name)" -var "container_type=$(container_type)" -var "container_image=$(container_image)" -var "container_image_tag=$(container_image)" -var "container_image_registry=$(container_image_registry)" -var "appservice_plan_name=$(appservice_plan_name)" -var "app_banner=$(app_banner)" -var "app_port=$(app_port)" -var "kind=$(kind)" -var "tier=$(tier)" -var "size=$(size)"'
          secureVarsFile: '$(terraformVarFile)'
          allowTelemetryCollection: false

      - task: TerraformCLI@0
        displayName: Apply
        inputs:
          command: 'apply'
          workingDirectory: '$(System.DefaultWorkingDirectory)/go-app/terraform'
          environmentServiceName: '$(armConnectionName)'
          commandOptions: '-var "expiry_date=$(expiry_date)" -var "pipeline_id=$(pipeline_id)" -var "resource_group_name=$(resource_group_name)" -var "app_name=$(app_name)" -var "container_type=$(container_type)" -var "container_image=$(container_image)" -var "container_image_tag=$(container_image)" -var "container_image_registry=$(container_image_registry)" -var "appservice_plan_name=$(appservice_plan_name)" -var "app_banner=$(app_banner)" -var "app_port=$(app_port)" -var "kind=$(kind)" -var "tier=$(tier)" -var "size=$(size)"'
          secureVarsFile: '$(terraformVarFile)'
          allowTelemetryCollection: false

- stage: Destroy
  displayName: Destroy Infrastructure
  dependsOn: Validation
  condition: and(succeeded(), eq(variables['action'], 'destroy'))

  jobs:  
  - job: Destroy
    displayName: Destroy Infrastructure
    pool:
      vmImage: $(vmImageName)

    steps:
      - task: TerraformInstaller@0
        displayName: Install 
        inputs:
          terraformVersion: 'latest'

      - task: TerraformCLI@0
        displayName: Init
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/go-app/terraform'
          backendType: 'azurerm'
          backendServiceArm: '$(armConnectionName)'
          backendAzureRmResourceGroupName: '$(backend-sa-rg-name)'
          backendAzureRmStorageAccountName: '$(backend-sa-name)'
          backendAzureRmContainerName: '$(backend-sa-container-name)'
          backendAzureRmKey: '$(tf-state-file-name)'
          allowTelemetryCollection: false

      - task: TerraformCLI@0
        displayName: Destroy
        inputs:
          command: 'destroy'
          workingDirectory: '$(System.DefaultWorkingDirectory)/go-app/terraform'
          environmentServiceName: '$(armConnectionName)'
          secureVarsFile: '$(terraformVarFile)'
          allowTelemetryCollection: false